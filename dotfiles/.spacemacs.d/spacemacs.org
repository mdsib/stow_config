#+TITLE: Spacemacs Config
This is another annotated emacs configuration, but this time it's personal.
* global settings
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  ; This file has been generated by spacemacs.org. Writing to it might be fun, but it won't be useful since its contents are overwritten every time you update spacemacs.org and load up spacemacs.
  (setq standard-indent 2)
  (show-paren-mode t)
  (electric-pair-mode t)
  (visual-line-mode t)
  (display-line-numbers-mode t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq whitespace-action '(auto-cleanup))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (define-key minibuffer-local-map [f3]
    (lambda () (interactive)
      (insert (buffer-name (window-buffer (minibuffer-selected-window))))))

  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")

  (setq backup-directory-alist '(("." . "~/.emacs.d/private/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 10   ; how many of the newest versions to keep
        kept-old-versions 5)   ; and how many of the old

  ; turning off idle autocomplete
  (defun ms/company-hook ()
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 3)
    (setq tab-always-indent t))

  (add-hook 'company-mode-hook 'ms/company-hook)

  (with-eval-after-load 'company (global-set-key (kbd "C-M-/") 'company-manual-begin))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp :tangle user-config.el
    (define-key
      evil-normal-state-map
      (kbd "Y")
      'evil-yank-line)
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

    ; some modes are better in emacs mode

    (defun ms/org-agenda-hook-fun ()
        (evil-set-initial-state 'org-agenda-mode 'emacs))

    (add-hook 'org-agenda-hook 'ms/org-agenda-hook-fun)

    (with-eval-after-load 'org-agenda
      (evil-set-initial-state 'org-agenda-mode 'emacs))

    (evil-set-initial-state 'magit-status-mode 'emacs)
    (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq yas--default-user-snippets-dir "~/.spacemacs.d/snippets")
#+END_SRC
* magit
Everything's fine, just have to expose some operations I use. =magit-blob-next= and =magit-blob-previous= to go backwards and forwards in time on a file.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys
    "gn" 'magit-blob-next
    "gp" 'magit-blob-previous
    "gi" 'magit-init)

  ; these bindings align each hunk to the top of the screen as you move
  (defun magit-status-mode-funs ()
    (local-set-key (kbd "M-n")
                   (lambda() (interactive)
                     (magit-section-forward)
                     (recenter-top-bottom 0)))
    (local-set-key (kbd "M-p")
                   (lambda() (interactive)
                     (magit-section-backward)
                     (recenter-top-bottom 0))))

  (with-eval-after-load 'magit
    (evil-set-initial-state 'magit-status-mode 'emacs)
    (if (null magit-status-mode-hook)
        (setq magit-status-mode-hook '(magit-status-mode-funs))
      (add-to-list 'magit-status-mode-hook 'magit-status-mode-funs)))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp :tangle user-init.el
  ; undoing what spacemacs did...
  (setq spacemacs-theme-org-agenda-height nil)
  (setq spacemacs-theme-org-height nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun ms/org-capture () (interactive) (org-capture nil "t"))
  (global-set-key (kbd "C-M-SPC") 'ms/org-capture)

  ; spacemacs defers the org layer.
  ; its config overrides things outside of with-eval-after-load
  (with-eval-after-load 'org
    ; priorities
    (setq org-highest-priority ?A)
    (setq org-default-priority ?C)
    (setq org-lowest-priority ?D)

    ; refiling
    (setq org-default-notes-file "~/org/refile.org")
    (setq org-refile-targets '(("~/org/todo.org" :maxlevel . 2) ("~/org/someday.org" :level . 1)))
    (setq org-refile-use-outline-path nil)
    (setq org-outline-path-complete-in-steps t)

    ; capturing
    (setq org-capture-templates
          '(("T" "todo at point" entry (file+headline "" "Todo")
             "* TODO %?\n  %u\n  %a")
            ("t" "todo" entry (file+headline org-default-notes-file "Todo")
             "* TODO %?")))

    (setq org-journal-file-format "%Y-%m-%d.org"
          org-journal-dir "~/org/journal")

    ; agenda
    ; put all unscheduled todos in stuck since they don't have a time to be done
    (setq org-stuck-projects
          '("TODO={.+}/-DONE" () nil "SCHEDULED:\\|DEADLINE:"))
    (setq org-agenda-use-tag-inheritance '(todo search timeline agenda))
    (setq org-agenda-files '("~/org/" "~/org/journal"))
    (setq org-agenda-custom-commands
          '(("z" "today"
             ((agenda "" ((org-agenda-ndays 1)))
              (tags-todo "org_journal")))
            ("p" "plan"
             ((agenda "" ((org-agenda-ndays 7)))
              (stuck "")))))

    ; src blocks: i like them where they are
    (setq org-src-window-setup 'same-buffer)

    ; the hooks
    (add-hook 'org-mode-hook
              (lambda ()
                ; minor modes
                (visual-line-mode)
                (org-term/jank-activate-modeish-thing)
                ; local bindings
                (local-set-key (kbd "C-x C-,") 'org-timestamp-down-day)
                (local-set-key (kbd "C-x C-.") 'org-timestamp-up-day)
                (local-set-key (kbd "C-c t") 'org-toggle-heading)
                (local-set-key (kbd "C-c w") 'org-refile)
                (local-set-key (kbd "C-c p") 'org-pomodoro))))
#+END_SRC
** org-term
This is an extension to org mode that highlights (and will eventually do more interesting things to) definitions and their usages.
Wrapping a word in =def*= and =*= makes it a definition.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (load-file (concat dotspacemacs-directory "org-terms.el"))
#+END_SRC
*** todo
- use projectile projects or similar to reference definitions across files
- make a view where definitions and their usages can be seen together
- implement function that moves buffer from a usage to its definition
- fix font color when usages occur on headings
- figure out how this could be exportable, or find a way to exclude  the =def= part of the definition when exporting.
- make into actual minor mode or org module
* web
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))
  (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
  (defun ms/flow-after-save ()
    (message "yes sir")
    (flow-minor-status))
  (defun ms/react-mode-hook-fun ()
    (evil-define-key 'insert react-mode-map (kbd "<tab>") 'js-jsx-indent-line)
    (flow-minor-enable-automatically)
    (prettier-js-mode)
    (if (and (boundp 'flow-minor-mode) flow-minor-mode)
        (progn
        (with-eval-after-load 'flycheck
            (flycheck-add-mode 'javascript-flow 'flow-minor-mode)
            (flycheck-add-mode 'javascript-eslint 'flow-minor-mode)
            (flycheck-add-next-checker 'javascript-flow 'javascript-eslint))
        (with-eval-after-load 'company
          (add-to-list 'company-backends 'company-flow))))
    (emmet-mode 0))
  (add-hook 'react-mode-hook 'ms/react-mode-hook-fun)
#+END_SRC
* erc
I use erc to connect to znc on a home server.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-lurker-threshold-time 3600)
  (setq erc-join-buffer 'bury)

  (defun ms/znc-join (suffix server)
    (lexical-let ((suffix suffix)
                  (server server))
      (lambda () (interactive)
        (erc-tls :server (concat "luv2serve-" suffix)
                 :port "5000"
                 :nick "mduggie"
                 :password (concat "mduggie/" server ":" (read-passwd "pass: "))))))

  (spacemacs/declare-prefix "E" "erc")
  (spacemacs/declare-prefix "Ez" "znc")

  (spacemacs/set-leader-keys
    "Ezl" (ms/znc-join "local" "freenode")
    "Ezr" (ms/znc-join "remote" "freenode"))
#+END_SRC
* ivy

Sometimes, I want to kill virtual buffers.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun ms/ivy-kill-buffer-and-virtual ()
    (interactive)
    (let* ((buffer (completing-read
                  "Buffer to kill: "
                  (append (mapcar 'car ivy--virtual-buffers)
                          (remove nil (mapcar 'buffer-name (buffer-list))))))
          (vbuff (assoc buffer ivy--virtual-buffers)))

      (if (get-buffer buffer)
          (kill-buffer buffer))
      (if vbuff
          (delete vbuff ivy--virtual-buffers))))

  (global-set-key (kbd "C-x M-k") 'ms/ivy-kill-buffer-and-virtual)

#+END_SRC
And sometimes I like to seperate those erc buffers.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun neq (val val2) (not (eq val val2)))
  (defun ms/ivy-switch-buffer-by-mode (mode includep ignore-virtual)
    (let* ((c (if includep 'neq 'eq))
           (ivy-use-virtual-buffers (if ignore-virtual nil ivy-use-virtual-buffers))
           (ivy-ignore-buffers
            (-map (lambda (item) (regexp-quote (buffer-name item)))
                  (-filter (lambda (item)
                             (and (not (eq item (other-buffer)))
                                  (funcall c mode (buffer-local-value 'major-mode item))))
                           (buffer-list)))))
      (ivy-switch-buffer)))

  (defun ms/ivy-switch-buffer-without-erc ()
    (interactive)
    (ms/ivy-switch-buffer-by-mode 'erc-mode nil nil))

  (defun ms/ivy-switch-buffer-with-erc ()
    (interactive)
    (ms/ivy-switch-buffer-by-mode 'erc-mode t t))

  (global-set-key (kbd "C-x b") 'ms/ivy-switch-buffer-without-erc)

  (spacemacs/set-leader-keys
    "bb" 'ms/ivy-switch-buffer-without-erc
    "Eb" 'ms/ivy-switch-buffer-with-erc)
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (spacemacs/set-leader-keys "pA" 'counsel-projectile-ag)
#+END_SRC
* extras
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun rgb-to-hex (r g b)
    (format "#%02X%02X%02X" r g b))

  (defun hex-to-rgb (hexcode)
    (format "rgb(%d, %d, %d)"
            (string-to-int (substring hexcode 1 3) 16)
            (string-to-int (substring hexcode 3 5) 16)
            (string-to-int (substring hexcode 5 7) 16)))
#+END_SRC
Other packages
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (push (directory-file-name "~/.spacemacs.d/packages") load-path)
  (autoload 'fennel-mode "~/.spacemacs.d/packages/fennel-mode/fennel-mode.el" nil t)
  (add-to-list 'auto-mode-alist '("\\.fnl\\'" . fennel-mode))
#+END_SRC
