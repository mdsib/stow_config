
; This file has been generated by spacemacs.org. Writing to it might be fun, but it won't be useful since its contents are overwritten every time you update spacemacs.org and load up spacemacs.
  (show-paren-mode t)
  (desktop-save-mode t)
  (electric-pair-mode t)
  (visual-line-mode t)
  (setq linum-format "%-2d ")
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq whitespace-action '(auto-cleanup))
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (define-key minibuffer-local-map [f3]
    (lambda () (interactive)
      (insert (buffer-name (window-buffer (minibuffer-selected-window))))))
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "xdg-open")
  (setq backup-directory-alist '(("." . "~/.emacs.d/private/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 10   ; how many of the newest versions to keep
        kept-old-versions 5)   ; and how many of the old

(define-key
  evil-normal-state-map
  (kbd "Y")
  'evil-yank-line)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

(setq yas--default-user-snippets-dir "~/.spacemacs.d/snippets")

(spacemacs/set-leader-keys
  "gn" 'magit-blob-next
  "gp" 'magit-blob-previous
  "gi" 'magit-init)

; these bindings align each hunk to the top of the screen as you move
(defun magit-status-mode-funs ()
  (local-set-key (kbd "M-n")
                 (lambda() (interactive)
                   (magit-section-forward)
                   (recenter-top-bottom 0)))
  (local-set-key (kbd "M-p")
                 (lambda() (interactive)
                   (magit-section-backward)
                   (recenter-top-bottom 0))))

(with-eval-after-load 'magit
  (evil-set-initial-state 'magit-status-mode 'emacs)
  (if (null magit-status-mode-hook)
      (setq magit-status-mode-hook '(magit-status-mode-funs))
    (add-to-list 'magit-status-mode-hook 'magit-status-mode-funs)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))



(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-lurker-threshold-time 3600)

(defun ms/znc-join (suffix server)
  (lexical-let ((suffix suffix)
                (server server))
    (lambda () (interactive)
      (erc-tls :server (concat "luv2serve-" suffix)
               :port "5000"
               :nick "mduggie"
               :password (concat "mduggie/" server ":" (read-passwd "pass: "))))))

(spacemacs/declare-prefix "E" "erc")
(spacemacs/declare-prefix "Ez" "znc")

(spacemacs/set-leader-keys
  "Ezl" (ms/znc-join "local" "freenode")
  "Ezr" (ms/znc-join "remote" "freenode"))

(defun ms/ivy-kill-buffer-and-virtual ()
  (interactive)
  (let* ((buffer (completing-read
                "Buffer to kill: "
                (append (mapcar 'car ivy--virtual-buffers)
                        (remove nil (mapcar 'buffer-name (buffer-list))))))
        (vbuff (assoc buffer ivy--virtual-buffers)))

    (if (get-buffer buffer)
        (kill-buffer buffer))
    (if vbuff
        (delete vbuff ivy--virtual-buffers))))

(global-set-key (kbd "C-x M-k") 'ms/ivy-kill-buffer-and-virtual)

(defun ms/ivy-switch-buffer-with-regex (regex)
  (interactive)
  (let ((old-ignore-list ivy-ignore-buffers))
    (progn
      (setq ivy-ignore-buffers `(,regex))
      (ivy-switch-buffer)
      (setq ivy-ignore-buffers old-ignore-list))))

(global-set-key
 (kbd "C-x b")
 (lambda () (interactive) (ms/ivy-switch-buffer-with-regex "#")))

(spacemacs/set-leader-keys
  "bb" (lambda () (interactive) (ms/ivy-switch-buffer-with-regex "#")))

(spacemacs/set-leader-keys
  "Eb" (lambda () (interactive) (ms/ivy-switch-buffer-with-regex "^[^#]")))

; refiling
(setq org-default-notes-file "~/org/refile.org")
(setq org-refile-targets '(("~/org/todo.org" :maxlevel . 2)))
(setq org-refile-use-outline-path nil)
(setq org-outline-path-complete-in-steps t)
; capturing
(setq org-capture-templates
        ; this one adds a link to the line of the file it's invoked from.
      '(("T" "todo at point" entry (file+headline "" "Todo")
         "* TODO %?\n  %u\n  %a")
        ; this one is just a normal todo
        ("t"
          "todo"
          entry
          (file+headline org-default-notes-file "Todo")
          "* TODO %?")))

; journal
;
(setq org-journal-file-format "%Y-%m-%d.org"
      org-journal-dir "~/org/journal")

; agenda
; put all unscheduled todos in stuck since they don't have a time to be done
(setq org-stuck-projects
      '("TODO={.+}/-DONE" () nil "SCHEDULED:\\|DEADLINE:"))
(setq org-agenda-use-tag-inheritance '(todo search timeline agenda))
(setq org-agenda-files '("~/org/" "~/org/journal"))
(setq org-agenda-custom-commands
      '(("z" "today"
         ((agenda "" ((org-agenda-ndays 1)))
          (tags-todo "org_journal")))))

; src blocks: i like them where they are
(setq org-src-window-setup 'same-buffer)

; the hook
(add-hook 'org-mode-hook
          (lambda ()
            ; minor modes
            (org-indent-mode)
            (org-term/jank-activate-modeish-thing)
            ; local bindings
            (local-set-key (kbd "C-x C-,") 'org-timestamp-down-day)
            (local-set-key (kbd "C-x C-.") 'org-timestamp-up-day)
            (local-set-key (kbd "C-c t") 'org-toggle-heading)
            (local-set-key (kbd "C-c p") 'org-pomodoro)))

(load-file (concat dotspacemacs-directory "org-terms.el"))
